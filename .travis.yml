# -*- mode: yaml -*-
# vim:ts=2:sw=2:ai:si:syntax=yaml
#
# Travis CI configuration
# https://docs.travis-ci.com/
---
# Run tests against pull requests and main branches only
if: |
  type = pull_request OR \
  branch IN (master, develop)

language: shell

before_install:
  # The default Git on macOS doesn't support protocol version 2 that's enabled
  # on Travis
  - >
    if [[ "${UNINSTALL_HOMEBREW}" == "YES" ]]; then
      git config --global protocol.version 1
    fi

  # yamllint disable rule:line-length

  # Uninstall existing Homebrew installation
  - >
    if [[ "${UNINSTALL_HOMEBREW}" == "YES" ]]; then
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh)" -- --force
    fi

  # yamllint enable rule:line-length

  # Remove existing NVM installation
  - >
    if [[ "${UNINSTALL_NVM}" == "YES" ]]; then
      unset NVM_CD_FLAGS
      unset NVM_DIR
      unset NVM_BIN
      rm -rf /Users/travis/.nvm
      rm -rf /etc/profile.d/travis-nvm.sh
    fi

  # Remove Go versions installed with Gimme
  - >
    if [[ "${UNINSTALL_GIMME}" == "YES" ]]; then
      if [[ -d "/home/travis/.gimme" ]]; then
        rm -rf /home/travis/.gimme
      fi
      unset GOROOT
      unset GIMME_ENV
      export PATH=$(echo "${PATH}" | sed 's~/home/travis/.gimme/versions/\([^/]*\)/bin:~~')
    fi

script:
  # Use Travis test configuration
  - cp machine.travis.yaml machine.yaml

  # Install Ansible and roles
  - ./setup --upgrade-ansible --no-run-playbook || travis_terminate 1

  # Check syntax of the Ansible playbooks
  - ./setup -s || travis_terminate 1

  # Run playbooks without installing roles
  - ./setup -q || travis_terminate 1

  # Run idempotence tests
  - >
    ./setup -q \
      | grep -q 'changed=0.*failed=0' \
      && (echo 'Idempotence test: pass' && exit 0) \
      || (echo 'Idempotence test: fail' && exit 1)

stages:
  - validate
  - test

jobs:
  include:
    - stage: validate
      name: Validate with pre-commit
      os: linux
      dist: focal
      language: python
      python: 3.8
      cache:
        directories:
          - $HOME/.cache/pre-commit/
      before_cache:
        - rm -f $HOME/.cache/pre-commit/pre-commit.log
      install:
        - pip3 install -r requirements.dev.txt
        - python --version
        - shfmt -version
        - shellcheck --version
        - pre-commit --version
      script:
        # shfmt version is too old
        - export SKIP=shfmt
        - pre-commit run -a

    - stage: test
      name: "macOS 10.15.5 (Catalina) with Xcode 12 (uninstall Homebrew)"
      os: osx
      osx_image: xcode12
      env: >-
        UNINSTALL_HOMEBREW=YES
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES

    - stage: test
      name: "macOS 10.15.5 (Catalina) with Xcode 11.6 (uninstall Homebrew)"
      os: osx
      osx_image: xcode11.6
      env: >-
        UNINSTALL_HOMEBREW=YES
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES

    - name: "macOS 10.14 (Mojave) with Xcode 11.0 (uninstall Homebrew)"
      os: osx
      osx_image: xcode11
      env: >-
        UNINSTALL_HOMEBREW=YES
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES

    - stage: test
      name: "macOS 10.15.5 (Catalina) with Xcode 12"
      os: osx
      osx_image: xcode12
      env: >-
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES
      addons:
        homebrew:
          update: true

    - stage: test
      name: "macOS 10.15.5 (Catalina) with Xcode 11.6"
      os: osx
      osx_image: xcode11.6
      env: >-
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES
      addons:
        homebrew:
          update: true

    - name: "macOS 10.14 (Mojave) with Xcode 11.0"
      os: osx
      osx_image: xcode11
      env: >-
        UNINSTALL_NVM=YES
        UNINSTALL_GIMME=YES
      addons:
        homebrew:
          update: true
